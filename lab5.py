from machine import Pin, SoftI2C
import ssd1306
import framebuf
from time import sleep

# Initialize the I2C and SSD1306 display
i2c = SoftI2C(sda=Pin(21), scl=Pin(22))
display = ssd1306.SSD1306_I2C(128, 64, i2c)
oled_width = 128
oled_height = 64
but = Pin(19, Pin.IN)
mode = 0
text = "Welcome ._. :3    "
prev_but = now_but = 0
x_pos = display.width
text_width = len(text) * 8

# Define the byte arrays for the images
image_download_bits = bytearray([0x3c,0x40,0x98,0xa4,0xa4,0x98,0x80,0x80,0xa0,0x90,0x88,0xa4,0x90,0x88,0xa4,0x90,0x88,0xa4,0x90,0x88,0xa4,0x90,0x88,0xa4,0x90,0x88,0x84,0x80,0x40,0x60,0x70,0x78,0x7c,0x5c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c])
image_download_bits1 = bytearray([0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xe8,0xf8,0x78,0x38,0x18,0x08,0x04,0x84,0x44,0x24,0x94,0x44,0x24,0x94,0x44,0x24,0x94,0x44,0x24,0x94,0x44,0x24,0x94,0x44,0x24,0x14,0x04,0x04,0x64,0x94,0x94,0x64,0x08,0xf0])
image_logo = bytearray([0x01,0xff,0xff,0xff,0x03,0xff,0xff,0xff,0x07,0xc0,0x00,0x03,0x0e,0xc0,0x00,0x03,0x1c,0xc0,0x00,0x03,0x38,0xc0,0x00,0x03,0x70,0xc0,0x00,0x03,0xe0,0xc0,0x00,0x03,0xff,0xc0,0x00,0x03,0xff,0xc0,0x00,0x03,0xc0,0x03,0xc0,0x03,0xc0,0x07,0xe0,0x03,0xc0,0x67,0xe6,0x03,0xc0,0xf7,0xef,0x03,0xc1,0xff,0xff,0x83,0xc1,0xff,0xff,0x83,0xc0,0xff,0xff,0x03,0xc0,0x7c,0x3e,0x03,0xc3,0xf8,0x1f,0xc3,0xc7,0xf0,0x0f,0xe3,0xc7,0xf0,0x0f,0xe3,0xc7,0xf0,0x0f,0xe3,0xc7,0xf0,0x0f,0xe3,0xc3,0xf8,0x1f,0xc3,0xc0,0x7c,0x3e,0x03,0xc0,0xff,0xff,0x03,0xc1,0xff,0xff,0x83,0xc1,0xff,0xff,0x83,0xc0,0xf7,0xef,0x03,0xc0,0x67,0xe6,0x03,0xc0,0x07,0xe0,0x03,0xc0,0x03,0xc0,0x03,0xc0,0x00,0x00,0x03,0xc0,0x00,0x00,0x03,0xc0,0x00,0x00,0x03,0xc0,0x00,0x00,0x03,0xc0,0x00,0x00,0x03,0xc0,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff])
image_sigma = bytearray([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x3f,0xf0,0x00,0x00,0x3f,0xf2,0x00,0x02,0xff,0xff,0xe0,0x1f,0xff,0xfd,0x80,0x05,0xf8,0x7f,0xf0,0x1f,0xfe,0x1e,0x00,0x0b,0x80,0x00,0xe0,0x07,0x00,0x03,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x02,0xaa,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x0c,0x00,0x00,0x00,0x00,0x0f,0xfe,0x60,0x09,0xff,0xe0,0x00,0x00,0x33,0xf4,0x20,0x08,0x9e,0x88,0x00,0x00,0x43,0xf2,0x20,0x08,0x9f,0x84,0x00,0x00,0x33,0xf0,0x00,0x01,0x1f,0xb0,0x00,0x00,0x1f,0xff,0x00,0x01,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x20,0x00,0x00,0x00,0x40,0x00,0x1f,0x80,0x20,0x00,0x00,0x00,0x7f,0xff,0xf0,0x00,0x20,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00])

fb1 = framebuf.FrameBuffer(image_download_bits, 6, 46, framebuf.MONO_HLSB)
fb2 = framebuf.FrameBuffer(image_download_bits1, 6, 46, framebuf.MONO_HLSB)
logo = framebuf.FrameBuffer(image_logo, 32, 40, framebuf.MONO_HLSB)
sigma = framebuf.FrameBuffer(image_sigma, 64, 64, framebuf.MONO_HLSB)

# Display logo
def showlogo():
    display.fill(0)
    display.blit(sigma, 34, 0)  # Example logo display
    display.text('FACE001', 36, 55, 1)
    display.show()

# Button press handler
def irqfunc():
    global mode
    mode = 1 - mode  # Toggle mode

# Scroll text
def scroll_text(oled, text):
    global mode, prev_but, now_but
    full_text = text * 3
    text_width = len(full_text) * 8
    scroll_pos = 0

    while mode == 1:
        oled.fill(0)
        oled.text(full_text, -scroll_pos, 20)
        oled.show()

        # Handle scrolling and button press
        scroll_pos = (scroll_pos + 1) % text_width
        now_but = but.value()
        if prev_but == 0 and now_but == 1:  # Button press detected
            sleep(0.2)  # Debounce delay
            irqfunc()  # Toggle mode
            print('Button pressed')
            return  # Exit scrolling text
        prev_but = now_but
        sleep(0.05)  # Scrolling speed

# Main loop
while True:
    now_but = but.value()
    if prev_but == 0 and now_but == 1:  # Button press detected
        sleep(0.2)  # Debounce delay
        irqfunc()  # Toggle mode
        print('Button pressed')

    if mode == 0:
        showlogo()
    else:
        display.fill(0)
        display.text(text, x_pos, 32, 1)  # Centering the text vertically at 32
        x_pos -= 1
        if x_pos < -text_width:
            x_pos = display.width
        display.show()

    prev_but = now_but
    sleep(0.01)  # Main loop debounce

